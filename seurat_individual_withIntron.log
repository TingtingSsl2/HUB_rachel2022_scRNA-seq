
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Attaching SeuratObject
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:dplyr’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

The following object is masked from ‘package:dplyr’:

    count


Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

The following object is masked from ‘package:Biobase’:

    rowMedians

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:dplyr’:

    first, rename

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc, slice

Loading required package: GenomeInfoDb

Attaching package: ‘SummarizedExperiment’

The following object is masked from ‘package:SeuratObject’:

    Assays

The following object is masked from ‘package:Seurat’:

    Assays


Attaching package: ‘monocle3’

The following objects are masked from ‘package:Biobase’:

    exprs, fData, fData<-, pData, pData<-


Attaching package: ‘cowplot’

The following object is masked from ‘package:patchwork’:

    align_plots

Read in marker genes
✔ Reading from "ScRNA-seq_Hassan_2022".
✔ Range ''MarkerGenesFiltered''.
Set working dir
If using Leiden algorithm in FindMarkers
Warning messages:
1: In readLines(f, n) : line 1 appears to contain an embedded nul
2: In readLines(f, n) :
  incomplete final line found on '/data/bioinformatics/projects/rachel2022/scr/._rachel2022_seurat.Rproj'
3: In readLines(f, n) : line 1 appears to contain an embedded nul
4: In readLines(f, n) :
  incomplete final line found on '/data/bioinformatics/projects/rachel2022/scr/._test.Rproj'
Step 2: Pre-processing
Remove ambient RNA by SoupX
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
152 genes passed tf-idf cut-off and 89 soup quantile filter.  Taking the top 89.
Using 546 independent estimates of rho.
Estimated global rho of 0.03
Expanding counts from 13 clusters to 10925 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
104 genes passed tf-idf cut-off and 75 soup quantile filter.  Taking the top 75.
Using 320 independent estimates of rho.
Estimated global rho of 0.07
Expanding counts from 13 clusters to 13336 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
75 genes passed tf-idf cut-off and 58 soup quantile filter.  Taking the top 58.
Using 186 independent estimates of rho.
Estimated global rho of 0.08
Expanding counts from 14 clusters to 17192 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
108 genes passed tf-idf cut-off and 83 soup quantile filter.  Taking the top 83.
Using 347 independent estimates of rho.
Estimated global rho of 0.04
Expanding counts from 11 clusters to 15151 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
139 genes passed tf-idf cut-off and 59 soup quantile filter.  Taking the top 59.
Using 24 independent estimates of rho.
Estimated global rho of 0.21
Expanding counts from 14 clusters to 54010 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
129 genes passed tf-idf cut-off and 98 soup quantile filter.  Taking the top 98.
Using 241 independent estimates of rho.
Estimated global rho of 0.08
Expanding counts from 13 clusters to 16329 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
167 genes passed tf-idf cut-off and 120 soup quantile filter.  Taking the top 100.
Using 182 independent estimates of rho.
Estimated global rho of 0.19
Expanding counts from 16 clusters to 29033 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
264 genes passed tf-idf cut-off and 125 soup quantile filter.  Taking the top 100.
Using 281 independent estimates of rho.
Estimated global rho of 0.09
Expanding counts from 14 clusters to 16867 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
272 genes passed tf-idf cut-off and 96 soup quantile filter.  Taking the top 96.
Using 120 independent estimates of rho.
Estimated global rho of 0.27
Expanding counts from 19 clusters to 33082 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
199 genes passed tf-idf cut-off and 100 soup quantile filter.  Taking the top 100.
Using 330 independent estimates of rho.
Estimated global rho of 0.14
Expanding counts from 16 clusters to 28351 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
658 genes passed tf-idf cut-off and 482 soup quantile filter.  Taking the top 100.
Using 972 independent estimates of rho.
Estimated global rho of 0.35
Estimated contamination is very high (0.35).
Expanding counts from 19 clusters to 33613 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
216 genes passed tf-idf cut-off and 113 soup quantile filter.  Taking the top 100.
Using 374 independent estimates of rho.
Estimated global rho of 0.21
Expanding counts from 19 clusters to 43228 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
75 genes passed tf-idf cut-off and 46 soup quantile filter.  Taking the top 46.
Using 85 independent estimates of rho.
Estimated global rho of 0.06
Expanding counts from 12 clusters to 6881 cells.
There were 13 warnings (use warnings() to see them)
Create Seurat object after SoupX
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Remove raw data to save memory
Add percent.mt and percent.rb to cell level metadata
Rename nCount_RNA and nFeature_RNA
Run doublet detection scripts
Read in doublet scores
Read 10925 items
Read 10925 items
Read 13336 items
Read 13336 items
Read 17192 items
Read 17192 items
Read 15151 items
Read 15151 items
Read 54010 items
Read 54010 items
Read 16329 items
Read 16329 items
Read 29033 items
Read 29033 items
Read 16867 items
Read 16867 items
Read 33082 items
Read 33082 items
Read 28351 items
Read 28351 items
Read 33613 items
Read 33613 items
Read 43228 items
Read 43228 items
Read 6881 items
Read 6881 items
Feature plot before QC
Filtered cells with 3SD of mean nCount and nFeature, percent of mito
Feature plot after QC
Step 4: Sample processing, Normalization, Find variable features, Data scaling
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Step 5: Determine the ‘dimensionality’ of the dataset
Step 6: Cell clustering
Cell clustering using default settings: PCA, Louvain. CHANGE dims according to elbow plot !!!
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session
11:30:27 UMAP embedding parameters a = 0.9922 b = 1.112
11:30:27 Read 7730 rows and found 15 numeric columns
11:30:27 Using Annoy for neighbor search, n_neighbors = 30
11:30:27 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:30:28 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef000172cfd66
11:30:28 Searching Annoy index using 1 thread, search_k = 3000
11:30:31 Annoy recall = 100%
11:30:32 Commencing smooth kNN distance calibration using 1 thread
11:30:34 Initializing from normalized Laplacian + noise
11:30:34 Commencing optimization for 500 epochs, with 322196 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:31:00 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:31:06 UMAP embedding parameters a = 0.9922 b = 1.112
11:31:06 Read 7449 rows and found 15 numeric columns
11:31:06 Using Annoy for neighbor search, n_neighbors = 30
11:31:06 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:31:07 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef000253fc40e
11:31:07 Searching Annoy index using 1 thread, search_k = 3000
11:31:10 Annoy recall = 100%
11:31:11 Commencing smooth kNN distance calibration using 1 thread
11:31:13 Initializing from normalized Laplacian + noise
11:31:13 Commencing optimization for 500 epochs, with 306394 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:31:38 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:31:45 UMAP embedding parameters a = 0.9922 b = 1.112
11:31:45 Read 8536 rows and found 15 numeric columns
11:31:45 Using Annoy for neighbor search, n_neighbors = 30
11:31:45 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:31:46 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef0005cf20e73
11:31:46 Searching Annoy index using 1 thread, search_k = 3000
11:31:49 Annoy recall = 100%
11:31:50 Commencing smooth kNN distance calibration using 1 thread
11:31:53 Initializing from normalized Laplacian + noise
11:31:53 Commencing optimization for 500 epochs, with 355554 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:32:21 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:32:28 UMAP embedding parameters a = 0.9922 b = 1.112
11:32:28 Read 6958 rows and found 15 numeric columns
11:32:28 Using Annoy for neighbor search, n_neighbors = 30
11:32:28 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:32:29 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef00028d592b8
11:32:29 Searching Annoy index using 1 thread, search_k = 3000
11:32:31 Annoy recall = 100%
11:32:32 Commencing smooth kNN distance calibration using 1 thread
11:32:34 Initializing from normalized Laplacian + noise
11:32:34 Commencing optimization for 500 epochs, with 292656 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:32:58 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:33:18 UMAP embedding parameters a = 0.9922 b = 1.112
11:33:18 Read 21727 rows and found 15 numeric columns
11:33:18 Using Annoy for neighbor search, n_neighbors = 30
11:33:18 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:33:21 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef0005b31b08b
11:33:21 Searching Annoy index using 1 thread, search_k = 3000
11:33:30 Annoy recall = 100%
11:33:31 Commencing smooth kNN distance calibration using 1 thread
11:33:34 Initializing from normalized Laplacian + noise
11:33:35 Commencing optimization for 200 epochs, with 933600 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:34:04 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:34:11 UMAP embedding parameters a = 0.9922 b = 1.112
11:34:11 Read 6291 rows and found 15 numeric columns
11:34:11 Using Annoy for neighbor search, n_neighbors = 30
11:34:11 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:34:11 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef0003da17808
11:34:11 Searching Annoy index using 1 thread, search_k = 3000
11:34:14 Annoy recall = 100%
11:34:15 Commencing smooth kNN distance calibration using 1 thread
11:34:17 Initializing from normalized Laplacian + noise
11:34:17 Commencing optimization for 500 epochs, with 263108 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:34:38 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:34:50 UMAP embedding parameters a = 0.9922 b = 1.112
11:34:51 Read 14696 rows and found 15 numeric columns
11:34:51 Using Annoy for neighbor search, n_neighbors = 30
11:34:51 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:34:52 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef0007cd52e62
11:34:52 Searching Annoy index using 1 thread, search_k = 3000
11:34:58 Annoy recall = 100%
11:34:59 Commencing smooth kNN distance calibration using 1 thread
11:35:01 Initializing from normalized Laplacian + noise
11:35:02 Commencing optimization for 200 epochs, with 627164 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:35:22 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:35:27 UMAP embedding parameters a = 0.9922 b = 1.112
11:35:27 Read 5947 rows and found 15 numeric columns
11:35:27 Using Annoy for neighbor search, n_neighbors = 30
11:35:27 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:35:28 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef0006816b356
11:35:28 Searching Annoy index using 1 thread, search_k = 3000
11:35:30 Annoy recall = 100%
11:35:31 Commencing smooth kNN distance calibration using 1 thread
11:35:33 Initializing from normalized Laplacian + noise
11:35:33 Commencing optimization for 500 epochs, with 250024 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:35:53 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:36:15 UMAP embedding parameters a = 0.9922 b = 1.112
11:36:15 Read 24750 rows and found 15 numeric columns
11:36:15 Using Annoy for neighbor search, n_neighbors = 30
11:36:15 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:36:18 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef0007ed91303
11:36:18 Searching Annoy index using 1 thread, search_k = 3000
11:36:28 Annoy recall = 100%
11:36:29 Commencing smooth kNN distance calibration using 1 thread
11:36:32 Initializing from normalized Laplacian + noise
11:36:34 Commencing optimization for 200 epochs, with 1062566 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:37:09 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:37:25 UMAP embedding parameters a = 0.9922 b = 1.112
11:37:25 Read 18545 rows and found 15 numeric columns
11:37:25 Using Annoy for neighbor search, n_neighbors = 30
11:37:25 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:37:27 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef0005d9e6100
11:37:27 Searching Annoy index using 1 thread, search_k = 3000
11:37:34 Annoy recall = 100%
11:37:35 Commencing smooth kNN distance calibration using 1 thread
11:37:38 Initializing from normalized Laplacian + noise
11:37:39 Commencing optimization for 200 epochs, with 795936 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:38:04 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:38:27 UMAP embedding parameters a = 0.9922 b = 1.112
11:38:27 Read 28008 rows and found 15 numeric columns
11:38:27 Using Annoy for neighbor search, n_neighbors = 30
11:38:27 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:38:31 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef000b9ec1e8
11:38:31 Searching Annoy index using 1 thread, search_k = 3000
11:38:44 Annoy recall = 100%
11:38:45 Commencing smooth kNN distance calibration using 1 thread
11:38:48 Initializing from normalized Laplacian + noise
11:38:50 Commencing optimization for 200 epochs, with 1187762 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:39:29 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:39:47 UMAP embedding parameters a = 0.9922 b = 1.112
11:39:47 Read 20186 rows and found 15 numeric columns
11:39:47 Using Annoy for neighbor search, n_neighbors = 30
11:39:47 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:39:49 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef00038fe6064
11:39:49 Searching Annoy index using 1 thread, search_k = 3000
11:39:57 Annoy recall = 100%
11:39:58 Commencing smooth kNN distance calibration using 1 thread
11:40:01 Initializing from normalized Laplacian + noise
11:40:02 Commencing optimization for 200 epochs, with 856334 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:40:29 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:40:32 UMAP embedding parameters a = 0.9922 b = 1.112
11:40:32 Read 2721 rows and found 15 numeric columns
11:40:32 Using Annoy for neighbor search, n_neighbors = 30
11:40:32 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:40:33 Writing NN index file to temp file /tmp/930101.tmpdir/RtmpuRPvjM/filef000f096745
11:40:33 Searching Annoy index using 1 thread, search_k = 3000
11:40:34 Annoy recall = 100%
11:40:35 Commencing smooth kNN distance calibration using 1 thread
11:40:37 Initializing from normalized Laplacian + noise
11:40:37 Commencing optimization for 500 epochs, with 106180 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:40:46 Optimization finished
Cell clustering using GLMPCA
Cell clustering using Leiden
